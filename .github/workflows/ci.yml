name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  # fmt:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         override: true
  #         components: rustfmt
  #     - name: Check formatting
  #       run: cargo fmt -- --check
  #
  # lint:
  #   runs-on: ubuntu-latest
  #   needs: fmt
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         override: true
  #     - name: Run Clippy
  #       run: cargo clippy -- -D warnings
  #
  # build:
  #   runs-on: ubuntu-latest
  #   needs: [lint]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Cache cargo registry and build
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #           target
  #         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cargo-
  #     - name: Install Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         override: true
  #     - name: Build and check
  #       run: |
  #         cargo check --all-targets --all-features
  #         cargo test --no-run

  integration:
    runs-on: ubuntu-latest
    # no dependencies
    steps:
      - uses: actions/checkout@v4
      # 测试步骤已移除，仅保留 Docker 镜像构建与推送
      - name: Ensure font directory for Docker
        run: |
          mkdir -p assets/fonts
          if [ -f "LXGWWenKaiGBScreen.ttf" ]; then
            cp LXGWWenKaiGBScreen.ttf assets/fonts/
          fi
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: network=host
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            CARGO_BUILD_JOBS=4
          platforms: linux/amd64
